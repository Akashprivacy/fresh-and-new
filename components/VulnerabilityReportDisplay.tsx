
import React, { useState } from 'react';
import type { VulnerabilityReport, RiskLevel } from '../types';
import { AlertOctagonIcon, CheckCircleIcon, ShieldExclamationIcon } from './Icons';

const getRiskStyle = (riskLevel: RiskLevel) => {
    switch (riskLevel) {
        case 'Critical': return { text: 'text-red-600 dark:text-red-400', border: 'border-red-500', bg: 'bg-red-50 dark:bg-red-900/20', icon: <ShieldExclamationIcon className="h-5 w-5" /> };
        case 'High': return { text: 'text-orange-600 dark:text-orange-400', border: 'border-orange-500', bg: 'bg-orange-50 dark:bg-orange-900/20', icon: <AlertOctagonIcon className="h-5 w-5" /> };
        case 'Medium': return { text: 'text-yellow-600 dark:text-yellow-400', border: 'border-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-900/20', icon: <AlertOctagonIcon className="h-5 w-5" /> };
        case 'Low': return { text: 'text-blue-600 dark:text-blue-400', border: 'border-blue-500', bg: 'bg-blue-50 dark:bg-blue-900/20', icon: <CheckCircleIcon className="h-5 w-5" /> };
        case 'Informational': return { text: 'text-slate-500 dark:text-slate-400', border: 'border-slate-400', bg: 'bg-slate-100 dark:bg-slate-800/20', icon: <CheckCircleIcon className="h-5 w-5" /> };
        default: return { text: 'text-slate-500', border: 'border-slate-400', bg: 'bg-slate-100 dark:bg-slate-800/20', icon: <CheckCircleIcon className="h-5 w-5" /> };
    }
};

const getScoreColor = (score: number) => {
    if (score < 40) return 'text-red-500';
    if (score < 70) return 'text-yellow-500';
    return 'text-green-500';
}

const ScoreGauge: React.FC<{ score: number }> = ({ score }) => (
    <div className="relative w-40 h-40">
        <svg className="w-full h-full" viewBox="0 0 36 36">
            <path
                className="text-[var(--bg-tertiary)]"
                stroke="currentColor"
                strokeWidth="3.5"
                fill="none"
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
            />
            <path
                className={getScoreColor(score)}
                stroke="currentColor"
                strokeWidth="3.5"
                strokeLinecap="round"
                fill="none"
                strokeDasharray={`${score}, 100`}
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
            />
        </svg>
        <div className="absolute inset-0 flex flex-col items-center justify-center">
            <span className={`text-4xl font-bold ${getScoreColor(score)}`}>{score}</span>
            <span className="text-sm font-semibold text-[var(--text-primary)]">Score</span>
        </div>
    </div>
);

const VulnerabilityCard: React.FC<{ vulnerability: VulnerabilityReport['vulnerabilities'][0] }> = ({ vulnerability }) => {
    const [isOpen, setIsOpen] = useState(false);
    const { text, bg, border, icon } = getRiskStyle(vulnerability.risk);

    return (
        <div className={`rounded-lg border shadow-sm ${bg} ${border}`}>
            <button onClick={() => setIsOpen(!isOpen)} className="w-full text-left p-4 flex items-center justify-between" aria-expanded={isOpen}>
                <div className="flex items-center gap-3">
                    <span className={text}>{icon}</span>
                    <h3 className="font-semibold text-md text-[var(--text-headings)]">{vulnerability.title}</h3>
                </div>
                <div className="flex items-center gap-4">
                    <span className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium ${bg} ${text} border ${border}`}>{vulnerability.risk}</span>
                    <svg className={`w-5 h-5 text-[var(--text-primary)] transform transition-transform ${isOpen ? 'rotate-180' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" /></svg>
                </div>
            </button>
            {isOpen && (
                <div className="px-5 pb-5 pt-2 border-t border-[var(--border-primary)] space-y-4">
                    <div>
                        <h4 className="text-sm font-semibold text-[var(--text-headings)]">Description</h4>
                        <p className="text-sm text-[var(--text-primary)] mt-1">{vulnerability.description}</p>
                    </div>
                     <div>
                        <h4 className="text-sm font-semibold text-green-600 dark:text-green-400">Remediation Plan</h4>
                        <div className="mt-2 p-3 bg-[var(--bg-primary)] rounded-md border border-[var(--border-primary)]">
                          <p className="text-sm text-green-700 dark:text-green-300 whitespace-pre-wrap font-mono">{vulnerability.remediation}</p>
                        </div>
                    </div>
                    {vulnerability.owaspCategory && vulnerability.owaspCategory !== 'N/A' && (
                        <div>
                             <h4 className="text-sm font-semibold text-[var(--text-headings)]">OWASP Category</h4>
                             <p className="text-sm text-[var(--text-primary)] mt-1">{vulnerability.owaspCategory}</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export const VulnerabilityReportDisplay: React.FC<{ result: VulnerabilityReport; scannedUrl: string }> = ({ result, scannedUrl }) => {
    const riskCounts = result.vulnerabilities.reduce((acc, v) => {
        acc[v.risk] = (acc[v.risk] || 0) + 1;
        return acc;
    }, {} as Record<string, number>);

    return (
        <div className="max-w-7xl mx-auto animate-fade-in-up">
            <div className="mb-6">
                <h3 className="text-2xl font-bold text-[var(--text-headings)]">Vulnerability Report</h3>
                <p className="text-[var(--text-primary)] mt-1">
                Report for: <a href={scannedUrl} target="_blank" rel="noopener noreferrer" className="font-semibold text-brand-blue hover:underline">{scannedUrl}</a>
                </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Left Column: Summary & Score */}
                <div className="lg:col-span-1 space-y-6">
                    <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6 flex flex-col items-center">
                        <ScoreGauge score={result.overallScore} />
                        <div className="text-center mt-4">
                            <h4 className="text-lg font-bold text-[var(--text-headings)]">Overall Risk: <span className={getRiskStyle(result.riskLevel).text}>{result.riskLevel}</span></h4>
                            <p className="text-sm text-[var(--text-primary)] mt-2">{result.summary}</p>
                        </div>
                    </div>
                    <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6">
                         <h4 className="text-lg font-bold text-[var(--text-headings)] mb-4">Findings Summary</h4>
                         <div className="space-y-2">
                             {(['Critical', 'High', 'Medium', 'Low', 'Informational'] as RiskLevel[]).map(level => {
                                 const count = riskCounts[level] || 0;
                                 if (count === 0) return null;
                                 const { text, icon } = getRiskStyle(level);
                                 return (
                                     <div key={level} className="flex items-center justify-between text-sm">
                                         <div className={`flex items-center gap-2 font-semibold ${text}`}>
                                            {icon}
                                            <span>{level} Risk</span>
                                         </div>
                                         <span className="font-bold text-[var(--text-headings)]">{count}</span>
                                     </div>
                                 )
                             })}
                         </div>
                    </div>
                </div>

                {/* Right Column: Vulnerabilities */}
                <div className="lg:col-span-2">
                     <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6">
                        <h4 className="text-lg font-bold text-[var(--text-headings)] mb-4">Vulnerabilities Found ({result.vulnerabilities.length})</h4>
                        {result.vulnerabilities.length > 0 ? (
                            <div className="space-y-4">
                                {result.vulnerabilities.map((vuln, index) => <VulnerabilityCard key={index} vulnerability={vuln} />)}
                            </div>
                        ) : (
                            <div className="text-center py-12 border-2 border-dashed border-[var(--border-primary)] rounded-lg">
                                <CheckCircleIcon className="mx-auto h-12 w-12 text-green-500" />
                                <h3 className="mt-2 text-lg font-medium text-[var(--text-headings)]">No Vulnerabilities Found</h3>
                                <p className="mt-1 text-sm text-[var(--text-primary)]">This passive scan did not identify any common vulnerabilities.</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>
            <div className="text-center mt-12 text-xs text-[var(--text-primary)]/70">
                <p><strong>Disclaimer:</strong> This report is based on a non-intrusive, AI-powered analysis of publicly accessible data. It is not a substitute for a comprehensive penetration test or a professional security audit.</p>
            </div>
        </div>
    );
};
